// snd_loc.h -- private sound functions

// !!! if this is changed, the asm code must change !!!
typedef struct {

	int			left;
	int			right;
} portable_samplepair_t;

typedef struct {

	int 		length;
	int 		loopstart;
	int 		speed;			// not needed, because converted on load?
	int 		width;
	int 		stereo;
	byte		data[ 1 ];		// variable sized
} sfxcache_t;

typedef struct sfx_s {

	Str 		name;
	int			registration_sequence;
	sfxcache_t	* cache;
	Str 		truename;
} sfx_t;

// a playsound_t will be generated by each call to S_StartSound, // when the mixer reaches playsound->begin, the playsound will
// be assigned to a channel
typedef struct playsound_s {

	struct playsound_s	* prev, * next;
	sfx_t		* sfx;
	float		volume;
	float		attenuation;
	int			entnum;
	int			entchannel;
	bool	fixed_origin;	// use origin field instead of entnum's origin
	Vec3		origin;
	unsigned	begin;			// begin on this sample
} playsound_t;

typedef struct {

	int			channels;
	int			samples;				// mono samples in buffer
	int			submission_chunk;		// don't mix less than this #
	int			samplepos;				// in mono samples
	int			samplebits;
	int			speed;
	byte		* buffer;
} dma_t;

// !!! if this is changed, the asm code must change !!!
typedef struct {

	sfx_t		* sfx;			// sfx number
	int			leftvol;		// 0-255 volume
	int			rightvol;		// 0-255 volume
	int			end;			// end time in global paintsamples
	int 		pos;			// sample position in sfx
	int			looping;		// where to loop, -1 = no looping OBSOLETE?
	int			entnum;			// to allow overriding a specific sound
	int			entchannel;		//
	Vec3		origin;			// only use if fixed_origin is set
	vec_t		dist_mult;		// distance multiplier( attenuation/clipK )
	int			master_vol;		// 0-255 master volume
	bool	fixed_origin;	// use origin instead of fetching entnum's origin
	bool	autosound;		// from an entity->sound, cleared each frame
} channel_t;

typedef struct {

	int			rate;
	int			width;
	int			channels;
	int			loopstart;
	int			samples;
	int			dataofs;		// chunk starts this many bytes from file start
} wavinfo_t;

//====================================================================

#define	MAX_CHANNELS			32
extern	channel_t   channels[ MAX_CHANNELS ];

extern	int		paintedtime;
extern	int		s_rawend;
extern	Vec3	listener_origin;
extern	Vec3	listener_forward;
extern	Vec3	listener_right;
extern	Vec3	listener_up;
extern	dma_t	dma;
extern	playsound_t	s_pendingplays;

#define	MAX_RAW_SAMPLES	8192
extern	portable_samplepair_t	s_rawsamples[ MAX_RAW_SAMPLES ];
